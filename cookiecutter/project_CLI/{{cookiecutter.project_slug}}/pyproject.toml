[tool.poetry]
name = "{{ cookiecutter.project_slug }}"
version = "{{ cookiecutter.project_version }}"
description = "{{ cookiecutter.project_description }}"
authors = ["{{ cookiecutter.author }} <{{ cookiecutter.email|lower }}>"]
readme = "README.md"
packages = [
    {include = "{{ cookiecutter.project_slug }}"}
]

[tool.poetry.dependencies]
python = "^{{ cookiecutter.python_major_version }}.{{ cookiecutter.python_minor_version }}"

[tool.poetry.group.dev.dependencies]
ruff = "*"
safety = "*"
deptry = "*"
poethepoet = "*"
mypy = "*"

[tool.poetry.group.test.dependencies]
pytest = "*"
coverage = "*"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.cookiecutter.post_generate]
script = "post_gen_project.py"

[tool.poe.tasks]
[tool.poe.tasks."start"]
cmd = "python {{ cookiecutter.project_slug }}/cli.py"
help = "Start a local app instance"

[tool.ruff]
line-length = 119

[tool.ruff.lint]
extend-select = [
    "E",   # pydocstyles
    "F",   # Pyflakes
    "I",   # isort
    "PL",  # Pylint
    "S",   # flake8-bandit
    "LOG", # flake8-logging
    "RUF", # ruff rules
]
preview = true

[tool.ruff.format]
preview = false


# Linting
[tool.poe.tasks."lint"]
sequence = [

    "lint:deptry",
    "lint:mypy",
    "lint:ruff-lint",
    "lint:ruff-format",
    "lint:ruff-fix",
]
help = "Lint the pyhon codebase with tools"
ignore_fail = "return_non_zero"

[tool.poe.tasks."lint:deptry"]
cmd = "deptry {{ cookiecutter.project_slug }}/"
help = "Lint the python codebase for dependencies issues with deptry"

[tool.poe.tasks."lint:mypy"]
cmd = "mypy {{ cookiecutter.project_slug }}/ --check-untyped-defs"
help = "Check that code is type annoted"

[tool.poe.tasks."lint:ruff-lint"]
cmd = "ruff check --preview {{ cookiecutter.project_slug }}/ "
help = "Lint the python codebase with ruff linters"

[tool.poe.tasks."lint:ruff-format"]
cmd = "ruff format --diff --preview {{ cookiecutter.project_slug }}/"
help = "Lint the python codebase with ruff linters"

[tool.poe.tasks."lint:ruff-fix"]
cmd = "ruff check --diff {{ cookiecutter.project_slug }}/"
help = "Show potentials fixes"

# Security
[tool.poe.tasks."sec"]
sequence = [
    "sec:safety",
]
help = "Check the pyhon codebase with tools to find vulnerabilities"
ignore_fail = "return_non_zero"

[tool.poe.tasks."sec:safety"]
cmd = "safety check --full-report"
help = "Check dependencies to find vulnerabilities using safety"


# Formatting
[tool.poe.tasks."format:ruff"]
cmd = "ruff format {{ cookiecutter.project_slug }}/"
help = "Format the python codebase according to ruff rules"

[tool.poe.tasks."format:ruff-fix"]
cmd = "ruff check --fix {{ cookiecutter.project_slug }}/"
help = "Fix identified issues accord to ruff rules"

# Tests
[tool.poe.tasks."test"]
sequence = [
    "test:unit",
    "test:coverage",
]
help = "Test unit tests and code coverage"
ignore_fail = "return_non_zero"


[tool.poe.tasks."test:unit"]
cmd = "pytest -s tests/"
help = "Run unit tests"

[tool.poe.tasks."test:coverage"]
cmd = "coverage run --source 'tests/' -m pytest"
help = "Run unit tests with coverage"


# Deployement
[tool.poe.tasks."deploy"]
sequence = [
    "deploy:prepare",
]
help = "Prepare necessary files for application deployment"
ignore_fail = "return_non_zero"

[tool.poe.tasks."deploy:prepare"]
cmd = "poetry export --without=dev --without-hashes --without-urls | awk '{print $1} FS=';' > {{ cookiecutter.project_slug }}/requirements.txt"
help = "Prepare the deployment unit"
